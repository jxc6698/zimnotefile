Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-01-05T20:57:19+08:00

====== express ======
Created 星期一 05 一月 2015



app.get(path.function(request, response));

path为请求的路径，第二个参数为处理请求的回调函数，有两个参数分别是request和response，代表请求信息和响应信息。


中间件(middleware)就是处理HTTP请求的函数，用来完成各种特定的任务，比如检查用户是否登录、分析数据、以及其他在需要最终将数据发送给用户之前完成的任务。 它最大的特点就是，一个中间件处理完，可以把相应数据再传递给下一个中间件。


function Middleware(request, response, next) { 
   next();
}

和get函数不同app.all()函数可以匹配所有的HTTP动词，也就是说它可以过滤所有路径的请求，如果使用all函数定义中间件，那么就相当于所有请求都必须先通过此该中间件。

格式：app.all(path,function(request, response));

使用all 函数定义中间件
如下所示，我们使用all函数在请求之前设置响应头属性。
var express = require("express");
var app = express();

app.all("*", function(request, response, next) {
    response.writeHead(200, { "Content-Type": "text/html;charset=utf-8" });      //设置响应头属性值
    next();
});

app.get("/", function(request, response) {
    response.end("欢迎来到首页!");
});

app.get("/about", function(request, response) {
    response.end("欢迎来到about页面!");
});

app.get("*", function(request, response) {
    response.end("404 - 未找到!");
});

app.listen(80);


use 函数定义中间件

use方法不仅可以调用中间件，还可以根据请求的网址，返回不同的网页内容，如下示例：

var express = require("express");
var app = express();

app.use(function(request, response, next) {
   if(request.url == "/") {
      response.send("Welcome to the homepage!");
   }else {
      next();
   }
});

app.use(function(request, response, next) {
   if(request.url == "/about") {
     response.send("Welcome to the about page!");
   }else {
     next();
   }
});
		
app.use(function(request, response) {
  response.send("404 error!");
});
app.listen(80);



1. req.host返回请求头里取的主机名(不包含端口号)。

2. req.path返回请求的URL的路径名。


获取参数的方法:
通过req.query获取get请求路径的对象参数值。

格式：req.query.参数名；请求路径如下示例：

例1： /search?n=Lenka

req.query.n  // "Lenka"
例2： /shoes?order=desc&shoe[color]=blue&shoe[type]=converse

req.query.order  // "desc"

req.query.shoe.color  // "blue"

req.query.shoe.type  // "converse"


request.param() 函数
格式：req.param("参数名")；请求路径如下示例：

例1： 获取请求根路径的参数值，如/?n=Lenka，方法如下：

var express = require('express');
var app = express();

app.get("/", function(req, res) {
    console.log(req.param("n")); //Lenka
    res.send("使用req.param属性获取请求根路径的参数对象值!");
});

app.listen(80);
例2：我们也可以获取具有相应路由规则的请求对象，假设路由规则为 /user/:name/，请求路径/user/mike,如下：

app.get("/user/:name/", function(req, res) {
    console.log(req.param("name")); //mike
    res.send("使用req.param属性获取具有路由规则的参数对象值!");
});
PS：所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。

request.param()：可以处理get和post请求参数，但查找优先级由高到低为req.params→req.body→req.query


格式：req.params.参数名；

例1. 如上课时请求根路径的例子，我们就可以这样获取，如下：

var express = require('express');
var app = express();

app.get("/user/:name/", function(req, res) {
    console.log(req.params.name); //mike
    res.send("使用req.params属性获取具有路由规则的参数对象值!");
});

app.listen(80);
查看运行结果，和param属性功能是一样的，同样获取name参数值。

例2：当然我们也可以请求复杂的路由规则，如/user/:name/:id，假设请求地址为：/user/mike/123，如下：

app.get("/user/:name/:id", function(req, res) {
    console.log(req.params.id); //"123"
    res.send("使用req.params属性复杂路由规则的参数对象值!");
});

request.params：处理 /:xxx 形式的get请求。

responsesend 方法
send()方法向浏览器发送一个响应信息，并可以智能处理不同类型的数据。格式如下：

res.send([body|status], [body]);


模板引擎
ejs和jade渲染模板


render 和 redirect


实现登陆之前我们先来了解一个属性 —— body。

body属性解析客户端的post请求参数，通过它可获取请求路径的参数值。

格式：req.body.参数名；

可以使用body来获取 post中的消息











