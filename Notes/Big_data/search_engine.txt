Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-12-01T21:27:32+08:00

====== search engine ======
Created 星期一 01 十二月 2014


搜索引擎基于数据的来源:
1. 目录式搜索引擎, 数据以人工和半自动的方式被搜集
2. 机器人搜索引擎, 通过网络爬虫进行搜索
3. 无搜索引擎, 接收到query后, 将用户的查询请求同时向多个搜索引擎递交

搜索引擎 索引处理的基本组件:
文本采集,文本转换,索引创建
文本采集组件: 数据收集,建立文档数据库来保存内容和元数据
文本转换组件: 将文档转化为索引项(特征),建立索引词表
文本创建组件: 利用索引转换的输出,创建索引数据结构,便于实现快速搜索.

查询处理的基本组件:
1. 用户交互 提供搜索用户和搜索引擎之间的接口, 接收用户查询并转换为索引项.从搜索引擎得到一个排好序的文档列表,并重新组织,作为搜索结构给用户.包括形成摘要,完善用户查询
2. 排序 得到用户交互组件的用户查询,并从搜索引擎得到按照分值排好序的文档列表.排序的效率依赖于索引技术,质量依赖于索引模型
3. 评价 用于评测和监测系统的效果和效率.利用日志数据来记录分析用户的行为.评价的结果用来调整和改善排序组建的性能.除了日志部分,其他一般作为离线应用.


文本采集组件:
爬虫;信息源;转换(处理成纯文本,编码);文档数据库
文本转换:
解释器(文档解释机器(XML),分词));停用词去除(一般选取较小的停用词集合);词干提取;词干提取;超链接和锚文本;信息抽取(命名实体识别器);分类器(文档内容分为特定的类别,如'体育','政治','商业')

索引的创建
文档统计(汇总信息,特征词);加权(根据模型(tfidf));倒排(倒排索引,如何快速创建,信息源更新如何快速更新);索引分派(将索引分发,利用分布式,并行做查询)

用户交互
查询输入;查询转换;结果输出

排序
打分机制(基于检索模型,提供文档的权值,tfidf,BM25)
性能优化(涉及排序算法和相关的索引表的设计,以降低系统的响应时间,提高查询吞吐量)主要是优化查询,估值,排序
分布式(以上的工作都是可以分布式处理的)

评价
日志()
排序分析
性能分析

the rank of page is based on three parts 
1. the actual contents of the web page
2. relationships with other pages on the web
3. reputation of domain the web page is from


Galago: 基于java的开源搜索引擎
Lemur:
Indri:

不同的搜索引擎调研: 异同
基于java的
1. lucene java搜索框架, 提供了查询引擎,索引引擎,和文本分析功能
2. Nutch : 提供了全文搜索和web 爬虫
3. elasticsearch : 基于java的分布式搜索引擎,基于json索引
4. Solandra: 基于Apache Solr 和 Apache Cassandra构建
5. indexTank: 是一套基于Java的索引-实时全文搜索引擎实现




爬虫
时新性: 
更新过多的网页不可靠
面向主题的信息采集
深层网络: 私人,表单,脚本
网站地图
分布式信息采集: url 分配,利用更多的计算资源


文档信息源: push 和 pull

存储的重要方式: bigtable
近似内容判断, 分词, n-gram
去除噪声: 删除网页中的无效信息(广告,新闻,服务...)



搜索引擎按照功能也可以分类:
垂直的和综合的 ?


搜索引擎对比:









